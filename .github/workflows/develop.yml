name: "[Develop] Unity Actions ðŸ˜Ž"

on: 
  push:
    branches:
      - 'develop'

jobs:
  build:
    name: Build for Android
    runs-on: ubuntu-latest
    environment: Development
    strategy:
      fail-fast: false
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
          lfs: true

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: src/Library
          key:
            Library-src-Android-${{
            hashFiles(src) }}
          restore-keys: |
            Library-src-Android-
            Library-src-
            Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          customImage: 'unityci/editor:2023.2.10f1-android-3.0.1' 
          projectPath: src
          targetPlatform: Android
          allowDirtyBuild: false
          versioning: Semantic
          androidExportType: 'androidAppBundle'
          androidAppBundle: true
          androidKeystoreName: appStore.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          androidTargetSdkVersion: AndroidApiLevel33 

      #Output
      - uses: actions/upload-artifact@v3
        with:
          name: Android
          path: build/Android
          if-no-files-found: ignore

  deployToGooglePlay:
    name: Deploy to the Google Play Store
    runs-on: ubuntu-latest
    needs: build
    env:
      GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
      GOOGLE_PLAY_KEY_FILE_PATH:
        ${{ format('{0}/fastlane/google-fastlane.json', github.workspace) }}
      ANDROID_BUILD_FILE_PATH: ${{ format('{0}/build/Android/Android.aab', github.workspace) }}
      ANDROID_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Download Android Artifact
        uses: actions/download-artifact@v2.0.8
        with:
          name: Android
          path: build/Android
      - name: Add Authentication
        run: echo "$GOOGLE_PLAY_KEY_FILE" > $GOOGLE_PLAY_KEY_FILE_PATH
      - name: Set up Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2
          bundler-cache: true
      - name: Deployment to Google Play Internal Draft
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'android internal' # Change to upload to a different lane
      
          # - name: Upload to Google Play Internal Draft
      #   uses: maierj/fastlane-action@v2.0.1
      #   with:
      #     lane: 'android internal_progress' # Change to upload to a different lane
      # - name: Upload to Google Play Internal Completed
      #   uses: maierj/fastlane-action@v2.0.1
      #   with:
      #     lane: 'android internal_completed' # Change to upload to a different lane
      
      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: Android
  
  # Pull To release branch
  pullToRelease:
    name: Create pull request to Release
    runs-on: ubuntu-latest
    needs: deployToGooglePlay
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Create pull request
      - name: pull-request
        run: |
          gh pr create -B release --title "Merge ${{ github.ref_name }} into release" --body 'Created by Github action' || gh pr edit -B release --title "Merge ${{ github.ref_name }} into release" --body 'Created by Github action'
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}


    # testRunner:
    # name: Project tests
    # runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     projectPath:
    #       - src/
    #     unityVersion:
    #       - 2022.3.3f1
    #     targetPlatform:
    #       - Android # Build an Android player.
    # steps:
    #   # Checkout (without LFS)
    #   - name: Checkout repository
    #     uses: actions/checkout@v2
    #     with:
    #       fetch-depth: 0
    #       lfs: true

    #   # Git LFS
    #   - name: Create LFS file list
    #     run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

    #   - name: Restore LFS cache
    #     uses: actions/cache@v2
    #     id: lfs-cache
    #     with:
    #       path: .git/lfs
    #       key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

    #   - name: Git LFS Pull
    #     run: |
    #       git lfs pull
    #       git add .
    #       git reset --hard

    #   # Cache
    #   - uses: actions/cache@v2
    #     with:
    #       path: ${{ matrix.projectPath }}/Library
    #       key:
    #         Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
    #         hashFiles(matrix.projectPath) }}
    #       restore-keys: |
    #         Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
    #         Library-${{ matrix.projectPath }}-
    #         Library-

    #   #Test
    #   - name: Run tests
    #     uses: game-ci/unity-test-runner@v2
    #     id: testRunner
    #     env:
    #       UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    #     with:
    #       projectPath: ${{ matrix.projectPath }}
    #       unityVersion: ${{ matrix.unityVersion }}
    #       githubToken: ${{ secrets.GITHUB_TOKEN }}  
